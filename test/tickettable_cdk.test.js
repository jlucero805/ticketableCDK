"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
const url = 'https://2hfpxnawm7.execute-api.us-west-1.amazonaws.com';
test('GET /members', async () => {
    const res = await axios_1.default.get(url + '/members', {
        headers: {
            authorization: '123',
        },
    });
    expect(res.status).toBe(200);
});
test('POST /members', async () => {
    let status;
    try {
        const res = await axios_1.default.post(url + '/members', {
            username: 'jluce',
            email: 'jluce@test.com',
            name: 'Jason',
        }, {
            headers: {
                authorization: '123',
            },
        });
        status = res.status;
    }
    catch (e) {
        status = e.response.status;
    }
    ;
    expect(status).toBe(409);
});
test('GET /members/{memberId}', async () => {
    const res = await axios_1.default.get(url + '/members/f697d05a-8e17-4d6c-ad66-57efd53aa524', {
        headers: {
            authorization: '123',
        },
    });
    expect(res.status).toBe(200);
});
test('PUT /members/{memberId}', async () => {
    const res = await axios_1.default.put(url + '/members/f697d05a-8e17-4d6c-ad66-57efd53aa524', {
        description: 'nice',
        name: 'name',
    }, {
        headers: {
            authorization: '123',
        },
    });
    expect(res.status).toBe(200);
});
test('GET /members/{memberId}/projects', async () => {
    const res = await axios_1.default.get(url + '/members/f697d05a-8e17-4d6c-ad66-57efd53aa524/projects', {
        headers: {
            authorization: '123',
        },
    });
    expect(res.status).toBe(200);
});
test('POST /members/{memberId}/projects', async () => {
    let status;
    try {
        const res = await axios_1.default.post(url + '/members/f697d05a-8e17-4d6c-ad66-57efd53aa524/projects', {
            name: 'ticketable',
        }, {
            headers: {
                authorization: '123',
            },
        });
        status = res.status;
    }
    catch (e) {
        status = e.response.status;
    }
    ;
    expect(status).toBe(409);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlja2V0dGFibGVfY2RrLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0aWNrZXR0YWJsZV9jZGsudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUdBLGlDQUEwQjtBQUUxQixNQUFNLEdBQUcsR0FBRyx3REFBd0QsQ0FBQTtBQUVwRSxJQUFJLENBQUMsY0FBYyxFQUFFLEtBQUssSUFBSSxFQUFFO0lBQzlCLE1BQU0sR0FBRyxHQUFHLE1BQU0sZUFBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsVUFBVSxFQUFFO1FBQzVDLE9BQU8sRUFBRTtZQUNQLGFBQWEsRUFBRSxLQUFLO1NBQ3JCO0tBQ0YsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDL0IsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsZUFBZSxFQUFFLEtBQUssSUFBSSxFQUFFO0lBQy9CLElBQUksTUFBTSxDQUFDO0lBQ1gsSUFBSTtRQUNGLE1BQU0sR0FBRyxHQUFHLE1BQU0sZUFBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsVUFBVSxFQUFFO1lBQzdDLFFBQVEsRUFBRSxPQUFPO1lBQ2pCLEtBQUssRUFBRSxnQkFBZ0I7WUFDdkIsSUFBSSxFQUFFLE9BQU87U0FDZCxFQUNEO1lBQ0UsT0FBTyxFQUFFO2dCQUNQLGFBQWEsRUFBRSxLQUFLO2FBQ3JCO1NBQ0YsQ0FDQSxDQUFDO1FBQ0YsTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUM7S0FDckI7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLE1BQU0sR0FBSSxDQUFTLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztLQUNyQztJQUFBLENBQUM7SUFDRixNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzNCLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLHlCQUF5QixFQUFFLEtBQUssSUFBSSxFQUFFO0lBQ3pDLE1BQU0sR0FBRyxHQUFHLE1BQU0sZUFBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsK0NBQStDLEVBQUU7UUFDakYsT0FBTyxFQUFFO1lBQ1AsYUFBYSxFQUFFLEtBQUs7U0FDckI7S0FDRixDQUFDLENBQUM7SUFDSCxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMvQixDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyx5QkFBeUIsRUFBRSxLQUFLLElBQUksRUFBRTtJQUN6QyxNQUFNLEdBQUcsR0FBRyxNQUFNLGVBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLCtDQUErQyxFQUNqRjtRQUNFLFdBQVcsRUFBRSxNQUFNO1FBQ25CLElBQUksRUFBRSxNQUFNO0tBQ2IsRUFDRDtRQUNFLE9BQU8sRUFBRTtZQUNQLGFBQWEsRUFBRSxLQUFLO1NBQ3JCO0tBQ0YsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDL0IsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsa0NBQWtDLEVBQUUsS0FBSyxJQUFJLEVBQUU7SUFDbEQsTUFBTSxHQUFHLEdBQUcsTUFBTSxlQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyx3REFBd0QsRUFBRTtRQUMxRixPQUFPLEVBQUU7WUFDUCxhQUFhLEVBQUUsS0FBSztTQUNyQjtLQUNGLENBQUMsQ0FBQztJQUNILE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQy9CLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLG1DQUFtQyxFQUFFLEtBQUssSUFBSSxFQUFFO0lBQ25ELElBQUksTUFBTSxDQUFDO0lBQ1gsSUFBSTtRQUNGLE1BQU0sR0FBRyxHQUFHLE1BQU0sZUFBSyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsd0RBQXdELEVBQUU7WUFDM0YsSUFBSSxFQUFFLFlBQVk7U0FDbkIsRUFDRDtZQUNFLE9BQU8sRUFBRTtnQkFDUCxhQUFhLEVBQUUsS0FBSzthQUNyQjtTQUNGLENBQ0EsQ0FBQztRQUNGLE1BQU0sR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDO0tBQ3JCO0lBQUMsT0FBTyxDQUFDLEVBQUU7UUFDVixNQUFNLEdBQUksQ0FBUyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7S0FDckM7SUFBQSxDQUFDO0lBQ0YsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMzQixDQUFDLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4cGVjdCBhcyBleHBlY3RDREssIG1hdGNoVGVtcGxhdGUsIE1hdGNoU3R5bGUgfSBmcm9tICdAYXdzLWNkay9hc3NlcnQnO1xuaW1wb3J0ICogYXMgY2RrIGZyb20gJ0Bhd3MtY2RrL2NvcmUnO1xuaW1wb3J0ICogYXMgVGlja2V0dGFibGVDZGsgZnJvbSAnLi4vbGliL3RpY2tldHRhYmxlX2Nkay1zdGFjayc7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuXG5jb25zdCB1cmwgPSAnaHR0cHM6Ly8yaGZweG5hd203LmV4ZWN1dGUtYXBpLnVzLXdlc3QtMS5hbWF6b25hd3MuY29tJ1xuXG50ZXN0KCdHRVQgL21lbWJlcnMnLCBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHJlcyA9IGF3YWl0IGF4aW9zLmdldCh1cmwgKyAnL21lbWJlcnMnLCB7XG4gICAgaGVhZGVyczoge1xuICAgICAgYXV0aG9yaXphdGlvbjogJzEyMycsXG4gICAgfSxcbiAgfSk7XG4gIGV4cGVjdChyZXMuc3RhdHVzKS50b0JlKDIwMCk7XG59KTtcblxudGVzdCgnUE9TVCAvbWVtYmVycycsIGFzeW5jICgpID0+IHtcbiAgbGV0IHN0YXR1cztcbiAgdHJ5IHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBheGlvcy5wb3N0KHVybCArICcvbWVtYmVycycsIHtcbiAgICAgIHVzZXJuYW1lOiAnamx1Y2UnLFxuICAgICAgZW1haWw6ICdqbHVjZUB0ZXN0LmNvbScsXG4gICAgICBuYW1lOiAnSmFzb24nLFxuICAgIH0sXG4gICAgeyBcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgYXV0aG9yaXphdGlvbjogJzEyMycsXG4gICAgICB9LFxuICAgIH1cbiAgICApO1xuICAgIHN0YXR1cyA9IHJlcy5zdGF0dXM7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBzdGF0dXMgPSAoZSBhcyBhbnkpLnJlc3BvbnNlLnN0YXR1cztcbiAgfTtcbiAgZXhwZWN0KHN0YXR1cykudG9CZSg0MDkpO1xufSk7XG5cbnRlc3QoJ0dFVCAvbWVtYmVycy97bWVtYmVySWR9JywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCByZXMgPSBhd2FpdCBheGlvcy5nZXQodXJsICsgJy9tZW1iZXJzL2Y2OTdkMDVhLThlMTctNGQ2Yy1hZDY2LTU3ZWZkNTNhYTUyNCcsIHtcbiAgICBoZWFkZXJzOiB7XG4gICAgICBhdXRob3JpemF0aW9uOiAnMTIzJyxcbiAgICB9LFxuICB9KTtcbiAgZXhwZWN0KHJlcy5zdGF0dXMpLnRvQmUoMjAwKTtcbn0pO1xuXG50ZXN0KCdQVVQgL21lbWJlcnMve21lbWJlcklkfScsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgcmVzID0gYXdhaXQgYXhpb3MucHV0KHVybCArICcvbWVtYmVycy9mNjk3ZDA1YS04ZTE3LTRkNmMtYWQ2Ni01N2VmZDUzYWE1MjQnLFxuICB7XG4gICAgZGVzY3JpcHRpb246ICduaWNlJyxcbiAgICBuYW1lOiAnbmFtZScsXG4gIH0sXG4gIHtcbiAgICBoZWFkZXJzOiB7XG4gICAgICBhdXRob3JpemF0aW9uOiAnMTIzJyxcbiAgICB9LFxuICB9KTtcbiAgZXhwZWN0KHJlcy5zdGF0dXMpLnRvQmUoMjAwKTtcbn0pO1xuXG50ZXN0KCdHRVQgL21lbWJlcnMve21lbWJlcklkfS9wcm9qZWN0cycsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgcmVzID0gYXdhaXQgYXhpb3MuZ2V0KHVybCArICcvbWVtYmVycy9mNjk3ZDA1YS04ZTE3LTRkNmMtYWQ2Ni01N2VmZDUzYWE1MjQvcHJvamVjdHMnLCB7XG4gICAgaGVhZGVyczoge1xuICAgICAgYXV0aG9yaXphdGlvbjogJzEyMycsXG4gICAgfSxcbiAgfSk7XG4gIGV4cGVjdChyZXMuc3RhdHVzKS50b0JlKDIwMCk7XG59KTtcblxudGVzdCgnUE9TVCAvbWVtYmVycy97bWVtYmVySWR9L3Byb2plY3RzJywgYXN5bmMgKCkgPT4ge1xuICBsZXQgc3RhdHVzO1xuICB0cnkge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGF4aW9zLnBvc3QodXJsICsgJy9tZW1iZXJzL2Y2OTdkMDVhLThlMTctNGQ2Yy1hZDY2LTU3ZWZkNTNhYTUyNC9wcm9qZWN0cycsIHtcbiAgICAgIG5hbWU6ICd0aWNrZXRhYmxlJyxcbiAgICB9LFxuICAgIHsgXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIGF1dGhvcml6YXRpb246ICcxMjMnLFxuICAgICAgfSxcbiAgICB9XG4gICAgKTtcbiAgICBzdGF0dXMgPSByZXMuc3RhdHVzO1xuICB9IGNhdGNoIChlKSB7XG4gICAgc3RhdHVzID0gKGUgYXMgYW55KS5yZXNwb25zZS5zdGF0dXM7XG4gIH07XG4gIGV4cGVjdChzdGF0dXMpLnRvQmUoNDA5KTtcbn0pOyJdfQ==