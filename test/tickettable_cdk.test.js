"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = require("axios");
const dotenv = require("dotenv");
dotenv.config();
const url = process.env.BASE_ENDPOINT;
test('GET /members', async () => {
    const res = await axios_1.default.get(url + '/members', {
        headers: {
            authorization: '123',
        },
    });
    expect(res.status).toBe(200);
});
test('POST /members', async () => {
    let status;
    try {
        const res = await axios_1.default.post(url + '/members', {
            username: 'jluce',
            email: 'jluce@test.com',
            name: 'Jason',
        }, {
            headers: {
                authorization: '123',
            },
        });
        status = res.status;
    }
    catch (e) {
        status = e.response.status;
    }
    ;
    expect(status).toBe(409);
});
test('GET /members/{memberId}', async () => {
    const res = await axios_1.default.get(url + '/members/f697d05a-8e17-4d6c-ad66-57efd53aa524', {
        headers: {
            authorization: '123',
        },
    });
    expect(res.status).toBe(200);
});
test('PUT /members/{memberId}', async () => {
    const res = await axios_1.default.put(url + '/members/f697d05a-8e17-4d6c-ad66-57efd53aa524', {
        description: 'nice',
        name: 'name',
    }, {
        headers: {
            authorization: '123',
        },
    });
    expect(res.status).toBe(200);
});
test('GET /members/{memberId}/projects', async () => {
    const res = await axios_1.default.get(url + '/members/f697d05a-8e17-4d6c-ad66-57efd53aa524/projects', {
        headers: {
            authorization: '123',
        },
    });
    expect(res.status).toBe(200);
});
test('POST /members/{memberId}/projects', async () => {
    let status;
    try {
        const res = await axios_1.default.post(url + '/members/f697d05a-8e17-4d6c-ad66-57efd53aa524/projects', {
            name: 'ticketable',
        }, {
            headers: {
                authorization: '123',
            },
        });
        status = res.status;
    }
    catch (e) {
        status = e.response.status;
    }
    ;
    expect(status).toBe(409);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlja2V0dGFibGVfY2RrLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ0aWNrZXR0YWJsZV9jZGsudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUdBLGlDQUEwQjtBQUMxQixpQ0FBaUM7QUFDakMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO0FBRWhCLE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDO0FBRXRDLElBQUksQ0FBQyxjQUFjLEVBQUUsS0FBSyxJQUFJLEVBQUU7SUFDOUIsTUFBTSxHQUFHLEdBQUcsTUFBTSxlQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxVQUFVLEVBQUU7UUFDNUMsT0FBTyxFQUFFO1lBQ1AsYUFBYSxFQUFFLEtBQUs7U0FDckI7S0FDRixDQUFDLENBQUM7SUFDSCxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMvQixDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxlQUFlLEVBQUUsS0FBSyxJQUFJLEVBQUU7SUFDL0IsSUFBSSxNQUFNLENBQUM7SUFDWCxJQUFJO1FBQ0YsTUFBTSxHQUFHLEdBQUcsTUFBTSxlQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxVQUFVLEVBQUU7WUFDN0MsUUFBUSxFQUFFLE9BQU87WUFDakIsS0FBSyxFQUFFLGdCQUFnQjtZQUN2QixJQUFJLEVBQUUsT0FBTztTQUNkLEVBQ0Q7WUFDRSxPQUFPLEVBQUU7Z0JBQ1AsYUFBYSxFQUFFLEtBQUs7YUFDckI7U0FDRixDQUNBLENBQUM7UUFDRixNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQztLQUNyQjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsTUFBTSxHQUFJLENBQVMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO0tBQ3JDO0lBQUEsQ0FBQztJQUNGLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDM0IsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMseUJBQXlCLEVBQUUsS0FBSyxJQUFJLEVBQUU7SUFDekMsTUFBTSxHQUFHLEdBQUcsTUFBTSxlQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRywrQ0FBK0MsRUFBRTtRQUNqRixPQUFPLEVBQUU7WUFDUCxhQUFhLEVBQUUsS0FBSztTQUNyQjtLQUNGLENBQUMsQ0FBQztJQUNILE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQy9CLENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLHlCQUF5QixFQUFFLEtBQUssSUFBSSxFQUFFO0lBQ3pDLE1BQU0sR0FBRyxHQUFHLE1BQU0sZUFBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsK0NBQStDLEVBQ2pGO1FBQ0UsV0FBVyxFQUFFLE1BQU07UUFDbkIsSUFBSSxFQUFFLE1BQU07S0FDYixFQUNEO1FBQ0UsT0FBTyxFQUFFO1lBQ1AsYUFBYSxFQUFFLEtBQUs7U0FDckI7S0FDRixDQUFDLENBQUM7SUFDSCxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMvQixDQUFDLENBQUMsQ0FBQztBQUVILElBQUksQ0FBQyxrQ0FBa0MsRUFBRSxLQUFLLElBQUksRUFBRTtJQUNsRCxNQUFNLEdBQUcsR0FBRyxNQUFNLGVBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLHdEQUF3RCxFQUFFO1FBQzFGLE9BQU8sRUFBRTtZQUNQLGFBQWEsRUFBRSxLQUFLO1NBQ3JCO0tBQ0YsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDL0IsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsbUNBQW1DLEVBQUUsS0FBSyxJQUFJLEVBQUU7SUFDbkQsSUFBSSxNQUFNLENBQUM7SUFDWCxJQUFJO1FBQ0YsTUFBTSxHQUFHLEdBQUcsTUFBTSxlQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyx3REFBd0QsRUFBRTtZQUMzRixJQUFJLEVBQUUsWUFBWTtTQUNuQixFQUNEO1lBQ0UsT0FBTyxFQUFFO2dCQUNQLGFBQWEsRUFBRSxLQUFLO2FBQ3JCO1NBQ0YsQ0FDQSxDQUFDO1FBQ0YsTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUM7S0FDckI7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNWLE1BQU0sR0FBSSxDQUFTLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztLQUNyQztJQUFBLENBQUM7SUFDRixNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzNCLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXhwZWN0IGFzIGV4cGVjdENESywgbWF0Y2hUZW1wbGF0ZSwgTWF0Y2hTdHlsZSB9IGZyb20gJ0Bhd3MtY2RrL2Fzc2VydCc7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnQGF3cy1jZGsvY29yZSc7XG5pbXBvcnQgKiBhcyBUaWNrZXR0YWJsZUNkayBmcm9tICcuLi9saWIvdGlja2V0dGFibGVfY2RrLXN0YWNrJztcbmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgKiBhcyBkb3RlbnYgZnJvbSAnZG90ZW52JztcbmRvdGVudi5jb25maWcoKTtcblxuY29uc3QgdXJsID0gcHJvY2Vzcy5lbnYuQkFTRV9FTkRQT0lOVDtcblxudGVzdCgnR0VUIC9tZW1iZXJzJywgYXN5bmMgKCkgPT4ge1xuICBjb25zdCByZXMgPSBhd2FpdCBheGlvcy5nZXQodXJsICsgJy9tZW1iZXJzJywge1xuICAgIGhlYWRlcnM6IHtcbiAgICAgIGF1dGhvcml6YXRpb246ICcxMjMnLFxuICAgIH0sXG4gIH0pO1xuICBleHBlY3QocmVzLnN0YXR1cykudG9CZSgyMDApO1xufSk7XG5cbnRlc3QoJ1BPU1QgL21lbWJlcnMnLCBhc3luYyAoKSA9PiB7XG4gIGxldCBzdGF0dXM7XG4gIHRyeSB7XG4gICAgY29uc3QgcmVzID0gYXdhaXQgYXhpb3MucG9zdCh1cmwgKyAnL21lbWJlcnMnLCB7XG4gICAgICB1c2VybmFtZTogJ2psdWNlJyxcbiAgICAgIGVtYWlsOiAnamx1Y2VAdGVzdC5jb20nLFxuICAgICAgbmFtZTogJ0phc29uJyxcbiAgICB9LFxuICAgIHsgXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIGF1dGhvcml6YXRpb246ICcxMjMnLFxuICAgICAgfSxcbiAgICB9XG4gICAgKTtcbiAgICBzdGF0dXMgPSByZXMuc3RhdHVzO1xuICB9IGNhdGNoIChlKSB7XG4gICAgc3RhdHVzID0gKGUgYXMgYW55KS5yZXNwb25zZS5zdGF0dXM7XG4gIH07XG4gIGV4cGVjdChzdGF0dXMpLnRvQmUoNDA5KTtcbn0pO1xuXG50ZXN0KCdHRVQgL21lbWJlcnMve21lbWJlcklkfScsIGFzeW5jICgpID0+IHtcbiAgY29uc3QgcmVzID0gYXdhaXQgYXhpb3MuZ2V0KHVybCArICcvbWVtYmVycy9mNjk3ZDA1YS04ZTE3LTRkNmMtYWQ2Ni01N2VmZDUzYWE1MjQnLCB7XG4gICAgaGVhZGVyczoge1xuICAgICAgYXV0aG9yaXphdGlvbjogJzEyMycsXG4gICAgfSxcbiAgfSk7XG4gIGV4cGVjdChyZXMuc3RhdHVzKS50b0JlKDIwMCk7XG59KTtcblxudGVzdCgnUFVUIC9tZW1iZXJzL3ttZW1iZXJJZH0nLCBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHJlcyA9IGF3YWl0IGF4aW9zLnB1dCh1cmwgKyAnL21lbWJlcnMvZjY5N2QwNWEtOGUxNy00ZDZjLWFkNjYtNTdlZmQ1M2FhNTI0JyxcbiAge1xuICAgIGRlc2NyaXB0aW9uOiAnbmljZScsXG4gICAgbmFtZTogJ25hbWUnLFxuICB9LFxuICB7XG4gICAgaGVhZGVyczoge1xuICAgICAgYXV0aG9yaXphdGlvbjogJzEyMycsXG4gICAgfSxcbiAgfSk7XG4gIGV4cGVjdChyZXMuc3RhdHVzKS50b0JlKDIwMCk7XG59KTtcblxudGVzdCgnR0VUIC9tZW1iZXJzL3ttZW1iZXJJZH0vcHJvamVjdHMnLCBhc3luYyAoKSA9PiB7XG4gIGNvbnN0IHJlcyA9IGF3YWl0IGF4aW9zLmdldCh1cmwgKyAnL21lbWJlcnMvZjY5N2QwNWEtOGUxNy00ZDZjLWFkNjYtNTdlZmQ1M2FhNTI0L3Byb2plY3RzJywge1xuICAgIGhlYWRlcnM6IHtcbiAgICAgIGF1dGhvcml6YXRpb246ICcxMjMnLFxuICAgIH0sXG4gIH0pO1xuICBleHBlY3QocmVzLnN0YXR1cykudG9CZSgyMDApO1xufSk7XG5cbnRlc3QoJ1BPU1QgL21lbWJlcnMve21lbWJlcklkfS9wcm9qZWN0cycsIGFzeW5jICgpID0+IHtcbiAgbGV0IHN0YXR1cztcbiAgdHJ5IHtcbiAgICBjb25zdCByZXMgPSBhd2FpdCBheGlvcy5wb3N0KHVybCArICcvbWVtYmVycy9mNjk3ZDA1YS04ZTE3LTRkNmMtYWQ2Ni01N2VmZDUzYWE1MjQvcHJvamVjdHMnLCB7XG4gICAgICBuYW1lOiAndGlja2V0YWJsZScsXG4gICAgfSxcbiAgICB7IFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICBhdXRob3JpemF0aW9uOiAnMTIzJyxcbiAgICAgIH0sXG4gICAgfVxuICAgICk7XG4gICAgc3RhdHVzID0gcmVzLnN0YXR1cztcbiAgfSBjYXRjaCAoZSkge1xuICAgIHN0YXR1cyA9IChlIGFzIGFueSkucmVzcG9uc2Uuc3RhdHVzO1xuICB9O1xuICBleHBlY3Qoc3RhdHVzKS50b0JlKDQwOSk7XG59KTsiXX0=